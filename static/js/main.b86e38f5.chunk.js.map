{"version":3,"sources":["functions/replace.js","components/Meme.js","components/MemesList.js","components/ChosedMeme.js","components/Search.js","components/App.js","serviceWorker.js","index.js"],"names":["whiteSpacesReplace","string","replace","Meme","meme","memesCounter","className","name","src","url","title","alt","MemesList","tableOfMemes","length","map","key","id","to","ChosedMeme","pickedMeme","useState","boxText0","setBoxText0","boxText1","setBoxText1","boxText2","setBoxText2","boxText3","setBoxText3","boxText4","setBoxText4","createdMeme","setCreatedMeme","href","rel","target","onSubmit","e","preventDefault","params","template_id","username","process","password","axios","post","then","response","console","log","data","catch","error","box_count","type","placeholder","value","onChange","Search","memes","filteredMemes","setFilteredMemes","tipChoosed","setTipChoosed","search","setSearch","handleSearchClick","handleSelect","currentTarget","getAttribute","newMemesList","filter","toLowerCase","includes","toLocaleLowerCase","tips","sort","memeA","memeB","localeCompare","onClick","App","setMemes","useEffect","get","chosedMeme","path","basename","exact","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.b86e38f5.chunk.js","sourcesContent":["export const whiteSpacesReplace = (string) => {\r\n    return string.replace(/\\s|\\?/g, ''); //usuwa również znak zapytania - tak wygladaloby bez skrocenia return string.replace(/\\s//g, '').replace(/\\?/g, '')\r\n}","import React from 'react';\r\nimport '../style/Meme.scss'\r\nimport { whiteSpacesReplace } from '../functions/replace';\r\n\r\nconst Meme = ({ meme, memesCounter }) => {\r\n\r\n    return (\r\n        <div className=\"meme-card\">\r\n            <img className={`meme-card__img meme-card__img--${whiteSpacesReplace(meme.name)} ${memesCounter <= 4 && \"meme-card__img--lengthAdapted\"}`} src={meme.url} title={meme.name} alt={meme.name} />\r\n            <div className=\"meme-card__overlay\">\r\n                <div className=\"meme-card__text\">{meme.name}</div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Meme;","import React from 'react';\r\nimport Meme from './Meme';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { whiteSpacesReplace } from '../functions/replace';\r\nimport '../style/MemesList.scss';\r\n\r\nconst MemesList = ({ tableOfMemes }) => {\r\n    let memesCounter = tableOfMemes.length;\r\n    return (\r\n        <div className={`memes-container ${memesCounter <= 4 && `memes-container--lengthAdapted`}`}>\r\n            {tableOfMemes.map(meme => (\r\n                <NavLink key={meme.id} to={whiteSpacesReplace(meme.name)}>\r\n                    <Meme meme={meme} key={meme.id} memesCounter={memesCounter} />\r\n                </NavLink>\r\n            ))}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MemesList;","import React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport '../style/ChosedMeme.scss';\r\nimport { whiteSpacesReplace } from '../functions/replace';\r\n\r\n\r\nconst ChosedMeme = ({ pickedMeme }) => {\r\n\r\n    //Tylko wtedy, gdy nie uzywa sie boxes\r\n    /*  const [text0, setText0] = useState(\"\");\r\n     const [text1, setText1] = useState(\"\"); */\r\n\r\n    const [boxText0, setBoxText0] = useState(\"\");\r\n    const [boxText1, setBoxText1] = useState(\"\");\r\n    const [boxText2, setBoxText2] = useState(\"\");\r\n    const [boxText3, setBoxText3] = useState(\"\");\r\n    const [boxText4, setBoxText4] = useState(\"\");\r\n\r\n    const [createdMeme, setCreatedMeme] = useState(null);\r\n\r\n    //rozwiazanie bez axiosa\r\n    /*     const handleSubmit = async e => {\r\n            e.preventDefault();\r\n            //console.log('dziala')\r\n            const params = {\r\n                template_id: pickedMeme.id,\r\n                //tylko wtedy gdy boxes sa nieuzywane, jak są to trzeba zamiast boxes &text0=${params.text0}&text1=%{params.text1}\r\n                //text0: text0,\r\n                //text1: text1,\r\n                boxText0: boxText0,\r\n                boxText1: boxText1,\r\n                boxText2: boxText2,\r\n                boxText3: boxText3,\r\n                boxText4: boxText4,\r\n                username: process.env.REACT_APP_IMGFLIP_USERNAME,\r\n                password: process.env.REACT_APP_IMGFLIP_PASSWORD\r\n            }\r\n            const response = await fetch(\r\n                `https://api.imgflip.com/caption_image?template_id=${params.template_id}&boxes[0][text]=${params.boxText0}&boxes[1][text]=${params.boxText1}&boxes[2][text]=${params.boxText2}&boxes[3][text]=${params.boxText3}&boxes[4][text]=${params.boxText4}&username=${params.username}&password=${params.password}`\r\n            );\r\n            const data = await response.json();\r\n            console.log(data.data.url)\r\n            setCreatedMeme(data.data.url)\r\n        } */\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n        const params = {\r\n            template_id: pickedMeme.id,\r\n            boxText0: boxText0,\r\n            boxText1: boxText1,\r\n            boxText2: boxText2,\r\n            boxText3: boxText3,\r\n            boxText4: boxText4,\r\n            username: process.env.REACT_APP_IMGFLIP_USERNAME,\r\n            password: process.env.REACT_APP_IMGFLIP_PASSWORD\r\n        }\r\n        axios.post(\r\n            `https://api.imgflip.com/caption_image?template_id=${params.template_id}&boxes[0][text]=${params.boxText0}&boxes[1][text]=${params.boxText1}&boxes[2][text]=${params.boxText2}&boxes[3][text]=${params.boxText3}&boxes[4][text]=${params.boxText4}&username=${params.username}&password=${params.password}`\r\n        ).then(response => {\r\n            console.log(response.data)\r\n            setCreatedMeme(response.data.data.url)\r\n        })\r\n            .catch(error => {\r\n                console.log(error)\r\n            })\r\n\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {createdMeme ?\r\n                <div className=\"createdMeme\">\r\n                    <a href={createdMeme} rel=\"noopener noreferrer\" target=\"_blank\">\r\n                        <img className=\"createdMeme__img\" src={createdMeme} alt=\"Created Meme\" />\r\n                    </a>\r\n                </div>\r\n\r\n                :\r\n                <div className=\"chosedMeme__container\">\r\n                    <form className=\"chosedMeme__form-container\" onSubmit={handleSubmit}>\r\n                        <div className=\"chosedMeme__picture-container\">\r\n                            <img className={`chosedMeme__img chosedMeme__img--${whiteSpacesReplace(pickedMeme.name)}`} src={pickedMeme.url} alt=\"\" />\r\n                        </div>\r\n                        <div className=\"chosedMeme__creation-container\">\r\n                            <div className=\"chosedMeme__title-container\">\r\n                                <h1 className=\"chosedMeme__title\">{pickedMeme.name}</h1>\r\n                            </div>\r\n                            <div className=\"chosedMeme__textCreation-container\">\r\n                                {pickedMeme.box_count <= 2 ?\r\n                                    <>\r\n                                        <input className=\"chosedMeme__input\" type=\"text\" placeholder=\"top title\" value={boxText0} onChange={e => { setBoxText0(e.target.value) }} />\r\n                                        <input className=\"chosedMeme__input\" type=\"text\" placeholder=\"bottom title\" value={boxText1} onChange={e => { setBoxText1(e.target.value) }} />\r\n                                    </>\r\n                                    : pickedMeme.box_count <= 3 ?\r\n                                        <>\r\n                                            <input className=\"chosedMeme__input\" type=\"text\" placeholder=\"text 1\" value={boxText0} onChange={e => { setBoxText0(e.target.value) }} />\r\n                                            <input className=\"chosedMeme__input\" type=\"text\" placeholder=\"text 2\" value={boxText1} onChange={e => { setBoxText1(e.target.value) }} />\r\n                                            <input className=\"chosedMeme__input\" type=\"text\" placeholder=\"text 3\" value={boxText2} onChange={e => { setBoxText2(e.target.value) }} />\r\n                                        </>\r\n                                        : pickedMeme.box_count <= 4 ?\r\n                                            <>\r\n                                                <input className=\"chosedMeme__input\" type=\"text\" placeholder=\"text 1\" value={boxText0} onChange={e => { setBoxText0(e.target.value) }} />\r\n                                                <input className=\"chosedMeme__input\" type=\"text\" placeholder=\"text 2\" value={boxText1} onChange={e => { setBoxText1(e.target.value) }} />\r\n                                                <input className=\"chosedMeme__input\" type=\"text\" placeholder=\"text 3\" value={boxText2} onChange={e => { setBoxText2(e.target.value) }} />\r\n                                                <input className=\"chosedMeme__input\" type=\"text\" placeholder=\"text 4\" value={boxText3} onChange={e => { setBoxText3(e.target.value) }} />\r\n                                            </>\r\n                                            :\r\n                                            <>\r\n                                                <input className={`chosedMeme__input chosedMeme__input--box5`} type=\"text\" placeholder=\"text 1\" value={boxText0} onChange={e => { setBoxText0(e.target.value) }} />\r\n                                                <input className={`chosedMeme__input chosedMeme__input--box5`} type=\"text\" placeholder=\"text 2\" value={boxText1} onChange={e => { setBoxText1(e.target.value) }} />\r\n                                                <input className={`chosedMeme__input chosedMeme__input--box5`} type=\"text\" placeholder=\"text 3\" value={boxText2} onChange={e => { setBoxText2(e.target.value) }} />\r\n                                                <input className={`chosedMeme__input chosedMeme__input--box5`} type=\"text\" placeholder=\"text 4\" value={boxText3} onChange={e => { setBoxText3(e.target.value) }} />\r\n                                                <input className={`chosedMeme__input chosedMeme__input--box5`} type=\"text\" placeholder=\"text 5\" value={boxText4} onChange={e => { setBoxText4(e.target.value) }} />\r\n                                            </>\r\n\r\n                                }\r\n\r\n                                <button className={`chosedMeme__submitButton ${pickedMeme.name === \"American Chopper Argument\" && `chosedMeme__submitButton--${whiteSpacesReplace(pickedMeme.name)}`}`} type=\"submit\">Create</button>\r\n                            </div>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            }\r\n        </>\r\n    );\r\n}\r\n\r\nexport default ChosedMeme;","import React, { useState } from 'react';\r\nimport '../style/Search.scss'\r\n\r\nconst Search = ({ memes, filteredMemes, setFilteredMemes, tipChoosed, setTipChoosed }) => {\r\n\r\n    const [search, setSearch] = useState('');\r\n\r\n    const handleSearch = (e) => {\r\n        setSearch(e.target.value)\r\n        let actualMemesList = [];\r\n        let newMemesList = [];\r\n        if (e.target.value !== \"\") {\r\n            actualMemesList = memes;\r\n            newMemesList = actualMemesList.filter(meme => {\r\n                return meme.name.toLowerCase().includes(e.target.value.toLocaleLowerCase());\r\n            })\r\n        } else {\r\n            newMemesList = memes;\r\n        }\r\n        setFilteredMemes(newMemesList)\r\n    }\r\n\r\n    const handleSearchClick = () => {\r\n        setTipChoosed(!tipChoosed);\r\n    }\r\n\r\n    const handleSelect = (e) => {\r\n        setTipChoosed(false);\r\n        setSearch(e.currentTarget.getAttribute('value'))\r\n        let actualMemesList = [];\r\n        let newMemesList = [];\r\n        if (e.target.value !== \"\") {\r\n            actualMemesList = memes;\r\n            newMemesList = actualMemesList.filter(meme => {\r\n                return meme.name.toLowerCase().includes(e.currentTarget.getAttribute('value').toLocaleLowerCase());\r\n            })\r\n        } else {\r\n            newMemesList = memes;\r\n        }\r\n        setFilteredMemes(newMemesList)\r\n    }\r\n\r\n    let tips = filteredMemes.sort((memeA, memeB) => memeA.name.localeCompare(memeB.name)); //posortowanie\r\n\r\n    tips = filteredMemes.map(meme => (\r\n        <li className=\"filter__dropdown-item\" key={meme.id} value={meme.name} onClick={handleSelect}>{meme.name}</li>\r\n    ));\r\n\r\n\r\n    return (\r\n        <div className=\"filter__panel\">\r\n            <input className=\"filter__search-input\" type=\"text\" value={search} onClick={handleSearchClick} onChange={handleSearch} />\r\n            {tipChoosed ?\r\n                <i onClick={handleSearchClick} className=\"filter__arrowIcon filter__arrowIcon--arrowUp fas fa-caret-up\"></i> :\r\n                <i onClick={handleSearchClick} className=\"filter__arrowIcon filter__aarrowIcon--arrowDown fas fa-caret-down\"></i>\r\n            }\r\n            <ul className={`filter__dropdown ${tipChoosed ? \"filter__dropdown--visible\" : \"filter__dropdown--hidden\"}`}>\r\n                {tipChoosed && tips}\r\n            </ul>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Search;","import React, { useState, useEffect } from 'react';\nimport '../style/App.scss';\nimport MemesList from './MemesList';\nimport ChosedMeme from './ChosedMeme';\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport axios from 'axios';\nimport { whiteSpacesReplace } from '../functions/replace';\nimport Search from './Search';\n\nfunction App() {\n\n  const [memes, setMemes] = useState([]);\n  const [filteredMemes, setFilteredMemes] = useState([]);\n  const [tipChoosed, setTipChoosed] = useState(false);\n\n  useEffect(() => {\n    axios\n      .get('https://api.imgflip.com/get_memes')\n      .then(response => {\n        console.log(response.data.data);\n        setMemes(response.data.data.memes);\n        setFilteredMemes(response.data.data.memes);\n      })\n      .catch(error => {\n        console.log(error)\n      })\n\n  }, [])\n\n  const handleTipStatusChange = () => {\n    if (tipChoosed === true) {\n      setTipChoosed(false);\n    }\n  }\n\n  const chosedMeme = memes.map(meme => (\n    <Route key={meme.id} path={`/${whiteSpacesReplace(meme.name)}`}>\n      <ChosedMeme pickedMeme={meme} />\n    </Route>\n  ));\n\n  return (\n    <Router basename={process.env.PUBLIC_URL}>\n      <div className=\"App\" onClick={handleTipStatusChange} >\n        <Switch>\n          <Route exact path=\"/\">\n            <div className=\"container\">\n              <header className=\"header\">\n                <Search memes={memes} filteredMemes={filteredMemes} setFilteredMemes={setFilteredMemes} tipChoosed={tipChoosed} setTipChoosed={setTipChoosed} />\n              </header>\n              <main className=\"main\">\n                <MemesList tableOfMemes={filteredMemes} />\n              </main>\n            </div>\n          </Route>\n          {chosedMeme}\n        </Switch>\n      </div>\n    </Router >\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}